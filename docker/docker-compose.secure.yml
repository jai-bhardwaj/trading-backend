version: '3.8'

services:
  trading-backend:
    build:
      context: .
      dockerfile: Dockerfile.secure
    container_name: trading-backend-secure
    restart: unless-stopped
    
    # Security: Run as non-root user
    user: "1000:1000"
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Drop all capabilities and add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Security: No privileged mode
    privileged: false
    
    # Security: Bind to localhost only (not 0.0.0.0)
    ports:
      - "127.0.0.1:8000:8000"
    
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Security: Environment variables from file
    env_file:
      - .env.secure
    
    # Security: Temporary filesystems for writable directories
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
      - /app/logs:noexec,nosuid,size=200m
    
    # Security: Mount volumes with specific permissions
    volumes:
      - ./config:/app/config:ro  # Read-only config
      - ./data:/app/data:rw,noexec,nosuid  # Data with restrictions
      - trading-logs:/app/logs:rw,noexec,nosuid
    
    # Security: Network isolation
    networks:
      - trading-network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security: Limit process count
    pids_limit: 100
    
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    depends_on:
      - redis
      - postgres

  redis:
    image: redis:7-alpine
    container_name: trading-redis-secure
    restart: unless-stopped
    
    # Security: Run as non-root
    user: "999:999"
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    
    # Security: No privileged mode
    privileged: false
    
    # Security: Internal port only (no external exposure)
    expose:
      - "6379"
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Security: Temporary filesystem for Redis data
    tmpfs:
      - /data:noexec,nosuid,size=100m
    
    # Security: Custom Redis configuration
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 200mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
      --bind 0.0.0.0
      --protected-mode yes
    
    networks:
      - trading-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres-secure
    restart: unless-stopped
    
    # Security: Run as postgres user
    user: "postgres"
    
    # Security: Drop capabilities
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    
    # Security: No privileged mode
    privileged: false
    
    # Security: Internal port only
    expose:
      - "5432"
    
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Environment variables
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    
    # Security: Persistent volume for data
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw,noexec,nosuid
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - trading-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Security: Disable new privileges
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Security: Custom network with isolation
networks:
  trading-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-trading
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Security: Named volumes with proper permissions
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  trading-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
