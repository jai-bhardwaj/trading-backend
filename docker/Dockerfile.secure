# Multi-stage build for security and efficiency
FROM python:3.11-slim as builder

# Security: Create non-root user for build
RUN groupadd -r appgroup && useradd -r -g appgroup -u 1000 appuser

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --user -r /tmp/requirements.txt

# =============================================================================
# Production stage
FROM python:3.11-slim as production

# Security: Install security updates only
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Security: Create non-root user
RUN groupadd -r appgroup && useradd -r -g appgroup -u 1000 -d /app appuser

# Security: Set secure directory permissions
WORKDIR /app
RUN chown -R appuser:appgroup /app

# Copy Python packages from builder
COPY --from=builder --chown=appuser:appgroup /root/.local /home/appuser/.local

# Security: Copy application files with proper ownership
COPY --chown=appuser:appgroup . /app/

# Security: Set PATH to include user packages
ENV PATH="/home/appuser/.local/bin:$PATH"

# Security: Remove unnecessary files
RUN find /app -name "*.pyc" -delete \
    && find /app -name "__pycache__" -delete \
    && rm -rf /app/.git* /app/Dockerfile* /app/docker-compose* \
    && rm -rf /app/tests /app/docs/*.md

# Security: Set proper file permissions
RUN chmod -R 755 /app \
    && chmod -R 644 /app/src \
    && chmod 755 /app/src \
    && find /app -name "*.py" -exec chmod 644 {} \; \
    && chmod 755 /app/main.py

# Security: Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/tmp \
    && chown -R appuser:appgroup /app/logs /app/data /app/tmp \
    && chmod 755 /app/logs /app/data /app/tmp

# Security: Switch to non-root user
USER appuser

# Security: Set secure environment variables
ENV PYTHONPATH="/app:$PYTHONPATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Security: Expose port (will be bound securely in docker-compose)
EXPOSE 8000

# Security: Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Security: Run application with limited privileges
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
