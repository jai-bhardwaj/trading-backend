version: '3.8'

# ðŸš€ Complete Trading Engine Deployment
# Production-ready with monitoring and optimizations

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # =====================================
  # PostgreSQL Database
  # =====================================
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      - POSTGRES_DB=trading_db
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_pass
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =====================================
  # Redis Cache & Queue
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 800mb 
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Trading Engine (Optimized)
  # =====================================
  trading-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading-engine
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_COUNT=4
      - MAX_QUEUE_SIZE=10000
      - ENABLE_PERFORMANCE_MONITORING=true
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=trading-engine,environment=production"
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r = redis.Redis(host='redis', port=6379); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================
  # Monitoring: Prometheus
  # =====================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=720h'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M

  # =====================================
  # Monitoring: Grafana
  # =====================================
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring:/etc/grafana/provisioning/dashboards
    networks:
      - trading-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_LOG_LEVEL=info
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    depends_on:
      - prometheus

  # =====================================
  # System Monitoring: Node Exporter
  # =====================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: trading-node-exporter
    ports:
      - "9101:9100"
    networks:
      - trading-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # =====================================
  # Container Monitoring: cAdvisor
  # =====================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: trading-cadvisor
    ports:
      - "8081:8080"
    networks:
      - trading-network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M 