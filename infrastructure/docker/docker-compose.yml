# Enterprise-Grade Pinnacle Trading Platform
# Production-ready microservices architecture
# Built with Google/Meta standards

version: "3.8"

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  redis:
    image: redis:7.2-alpine
    container_name: trading-redis
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL service removed - using external DATABASE_URL

  # =============================================================================
  # CORE TRADING SERVICES
  # =============================================================================

  gateway:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.base
    container_name: trading-gateway
    command: python services/gateway/gateway.py
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=gateway
      - SERVICE_PORT=8000
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  auth:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.base
    container_name: trading-auth
    command: python services/auth/user_service.py
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=auth
      - SERVICE_PORT=8001
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  market-data:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.base
    container_name: trading-market-data
    command: python services/market-data/market_service.py
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=market-data
      - SERVICE_PORT=8002
      - REDIS_URL=redis://redis:6379
      - ANGEL_ONE_API_KEY=${ANGEL_ONE_API_KEY:-}
      - ANGEL_ONE_CLIENT_ID=${ANGEL_ONE_CLIENT_ID:-}
      - ANGEL_ONE_CLIENT_SECRET=${ANGEL_ONE_CLIENT_SECRET:-}
      - ANGEL_ONE_TOTP_SECRET=${ANGEL_ONE_TOTP_SECRET:-}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  strategy-engine:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.base
    container_name: trading-strategy-engine
    command: python services/strategy-engine/strategy_engine.py
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=strategy-engine
      - SERVICE_PORT=8003
      - REDIS_URL=redis://redis:6379
      - MAX_CONCURRENT_STRATEGIES=50
      - STRATEGY_EXECUTION_THREADS=32
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  order-management:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.base
    container_name: trading-order-management
    command: python services/order-management/order_manager.py
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=order-management
      - SERVICE_PORT=8004
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - ANGEL_ONE_API_KEY=${ANGEL_ONE_API_KEY:-}
      - ANGEL_ONE_CLIENT_ID=${ANGEL_ONE_CLIENT_ID:-}
      - ANGEL_ONE_CLIENT_SECRET=${ANGEL_ONE_CLIENT_SECRET:-}
      - ORDER_PROCESSING_THREADS=16
      - MAX_ORDERS_PER_SECOND=1000
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  notification:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.base
    container_name: trading-notification
    command: python services/notification/notification_service.py
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=notification
      - SERVICE_PORT=8005
      - REDIS_URL=redis://redis:6379
      - NOTIFICATION_WORKERS=8
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 15s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
