#!/usr/bin/env python3
"""
Simple script to check how many orders are being generated by monitoring Redis signals
"""

import asyncio
import json
import logging
import redis.asyncio as redis
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def monitor_signals():
    """Monitor Redis signals to count how many orders would be generated"""
    
    # Connect to Redis
    redis_client = redis.from_url("redis://localhost:6379")
    await redis_client.ping()
    logger.info("‚úÖ Connected to Redis")
    
    # Subscribe to signals
    pubsub = redis_client.pubsub()
    await pubsub.subscribe("strategy_signals")
    logger.info("‚úÖ Subscribed to strategy_signals channel")
    
    signal_count = 0
    start_time = datetime.now()
    
    try:
        logger.info("üëÇ Monitoring signals for 30 seconds...")
        
        while True:
            message = await pubsub.get_message(
                ignore_subscribe_messages=True, 
                timeout=1.0
            )
            
            if message and message["type"] == "message":
                try:
                    signal = json.loads(message["data"].decode())
                    signal_count += 1
                    
                    logger.info(f"üì• Signal #{signal_count}: {signal['symbol']} {signal['signal_type']} @ {signal['price']} (confidence: {signal.get('confidence', 'N/A')})")
                    
                    # Show progress every 10 signals
                    if signal_count % 10 == 0:
                        elapsed = (datetime.now() - start_time).total_seconds()
                        rate = signal_count / elapsed if elapsed > 0 else 0
                        logger.info(f"üìä Progress: {signal_count} signals in {elapsed:.1f}s (rate: {rate:.2f} signals/sec)")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error parsing signal: {e}")
            
            # Check if we've been monitoring for 30 seconds
            elapsed = (datetime.now() - start_time).total_seconds()
            if elapsed >= 30:
                break
                
    except KeyboardInterrupt:
        logger.info("üõë Monitoring stopped by user")
    
    finally:
        await pubsub.unsubscribe("strategy_signals")
        await redis_client.close()
    
    # Final statistics
    elapsed = (datetime.now() - start_time).total_seconds()
    rate = signal_count / elapsed if elapsed > 0 else 0
    
    logger.info("=" * 50)
    logger.info("üìä FINAL STATISTICS:")
    logger.info(f"   Total Signals Received: {signal_count}")
    logger.info(f"   Monitoring Duration: {elapsed:.1f} seconds")
    logger.info(f"   Average Rate: {rate:.2f} signals/second")
    logger.info(f"   Estimated Orders/Hour: {rate * 3600:.0f}")
    logger.info("=" * 50)
    
    return signal_count

async def main():
    """Main function"""
    logger.info("üöÄ Starting Signal Monitoring")
    
    try:
        signal_count = await monitor_signals()
        logger.info(f"‚úÖ Monitoring completed. Total signals: {signal_count}")
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
