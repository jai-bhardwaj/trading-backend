"""
Trading signal definitions and utilities
"""

from dataclasses import dataclass, asdict
from typing import Dict, Any, Optional
from datetime import datetime
from enum import Enum

from app.models.base import OrderSide
from app.utils.timezone_utils import ist_now as datetime_now


@dataclass
class StrategySignal:
    """Represents a trading signal generated by a strategy"""
    symbol: str
    side: OrderSide  # BUY or SELL
    quantity: int
    confidence: float = 0.0
    signal_type: str = "TRADE"
    timestamp: datetime = None
    price: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime_now()
        if self.metadata is None:
            self.metadata = {}
    
    def to_dict(self) -> Dict[str, Any]:
        data = asdict(self)
        data['side'] = self.side.value if isinstance(self.side, OrderSide) else self.side
        data['timestamp'] = self.timestamp.isoformat() if self.timestamp else None
        return data


class SignalType(Enum):
    """Types of trading signals"""
    BUY = "BUY"
    SELL = "SELL"
    EXIT = "EXIT"
    HOLD = "HOLD"
    
    
class SignalConfidence(Enum):
    """Signal confidence levels"""
    LOW = 0.3
    MEDIUM = 0.6
    HIGH = 0.8
    VERY_HIGH = 0.9 