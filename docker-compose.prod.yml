version: '3.8'

# ðŸš€ PRODUCTION Docker Compose Override
# Enhanced security, performance, and monitoring

services:
  # =====================================
  # Enhanced Trading Engine (PRODUCTION)
  # =====================================
  trading-engine:
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    environment:
      - WORKER_MEMORY_LIMIT=2G
      - MAX_WORKERS=4
      - ENABLE_PERFORMANCE_MONITORING=true
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=trading-engine,environment=production"

  # =====================================
  # Enhanced Trading API (PRODUCTION)
  # =====================================
  trading-api:
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    environment:
      - API_MEMORY_LIMIT=1G
      - UVICORN_WORKERS=4
      - ENABLE_REQUEST_LOGGING=true
      - ENABLE_RATE_LIMITING=true
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=trading-api,environment=production"

  # =====================================
  # Enhanced Strategy Monitor (PRODUCTION)
  # =====================================
  strategy-monitor:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.3'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "5"
        labels: "service=strategy-monitor,environment=production"

  # =====================================
  # Production Redis (LOCAL)
  # =====================================
  redis:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 800mb 
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
      --save 900 1
      --save 300 10
      --save 60 10000
    security_opt:
      - no-new-privileges:true
    sysctls:
      net.core.somaxconn: 1024
    logging:
      driver: json-file
      options:
        max-size: "25m"
        max-file: "3"
        labels: "service=redis,environment=production"

  # =====================================
  # Production Monitoring Stack
  # =====================================
  prometheus:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=720h'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'

  grafana:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_LOG_LEVEL=info
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false

  # =====================================
  # Production NGINX with SSL
  # =====================================
  nginx:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trading-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.trading-api.tls=true"
      - "traefik.http.routers.trading-api.tls.certresolver=letsencrypt"

# =====================================
# Production Network Configuration
# =====================================
networks:
  trading-network:
    driver: bridge

# =====================================
# Production Volume Configuration
# =====================================
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/grafana 