#!/usr/bin/env python3
"""
Setup AngelOne Credentials

Script to help configure AngelOne API credentials for the trading system.
This will update the .env file with the correct credentials.
"""

import os
from pathlib import Path

def setup_angelone_credentials():
    """Setup AngelOne credentials interactively"""
    print("🔑 AngelOne Credentials Setup")
    print("=" * 50)
    print("This will help you configure AngelOne API credentials for instrument fetching.")
    print("Note: These are separate from the main trading broker credentials.")
    print()
    
    # Get current values
    current_api_key = os.getenv('ANGELONE_API_KEY_INSTRUMENTS', '')
    current_client_id = os.getenv('ANGELONE_CLIENT_ID_INSTRUMENTS', '')
    current_password = os.getenv('ANGELONE_PASSWORD_INSTRUMENTS', '')
    current_totp = os.getenv('ANGELONE_TOTP_SECRET_INSTRUMENTS', '')
    
    print("Current values:")
    print(f"API Key: {current_api_key[:10]}..." if current_api_key else "API Key: Not set")
    print(f"Client ID: {current_client_id}" if current_client_id else "Client ID: Not set")
    print(f"Password: {'Set' if current_password else 'Not set'}")
    print(f"TOTP Secret: {'Set' if current_totp else 'Not set'}")
    print()
    
    # Get new values
    print("Enter new credentials (press Enter to keep current value):")
    
    api_key = input(f"API Key [{current_api_key[:10]}...]: ").strip()
    if not api_key:
        api_key = current_api_key
    
    client_id = input(f"Client ID [{current_client_id}]: ").strip()
    if not client_id:
        client_id = current_client_id
    
    password = input(f"Password [{'Current' if current_password else 'None'}]: ").strip()
    if not password:
        password = current_password
    
    totp_secret = input(f"TOTP Secret [{'Current' if current_totp else 'None'}]: ").strip()
    if not totp_secret:
        totp_secret = current_totp
    
    # Validate inputs
    if not all([api_key, client_id, password]):
        print("❌ Error: API Key, Client ID, and Password are required!")
        return False
    
    # Update .env file
    env_file = Path('.env')
    
    # Read existing .env content
    env_content = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_content[key] = value
    
    # Update AngelOne credentials
    env_content['ANGELONE_API_KEY_INSTRUMENTS'] = api_key
    env_content['ANGELONE_CLIENT_ID_INSTRUMENTS'] = client_id
    env_content['ANGELONE_PASSWORD_INSTRUMENTS'] = password
    if totp_secret:
        env_content['ANGELONE_TOTP_SECRET_INSTRUMENTS'] = totp_secret
    
    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# Trading Engine Environment Variables\n")
        f.write("# Generated by setup_angelone_credentials.py\n\n")
        
        for key, value in env_content.items():
            f.write(f"{key}={value}\n")
    
    print(f"✅ Credentials saved to {env_file}")
    print()
    print("Next steps:")
    print("1. Restart the trading engine to use the new credentials")
    print("2. Check logs for successful AngelOne authentication")
    print("3. If authentication fails, verify your credentials are correct")
    
    return True

def test_credentials():
    """Test if current credentials work"""
    print("🧪 Testing AngelOne Credentials")
    print("=" * 50)
    
    # Check if credentials are set
    api_key = os.getenv('ANGELONE_API_KEY_INSTRUMENTS')
    client_id = os.getenv('ANGELONE_CLIENT_ID_INSTRUMENTS')
    password = os.getenv('ANGELONE_PASSWORD_INSTRUMENTS')
    totp_secret = os.getenv('ANGELONE_TOTP_SECRET_INSTRUMENTS')
    
    if not all([api_key, client_id, password]):
        print("❌ Credentials not fully configured")
        print("Use setup mode to configure credentials first")
        return False
    
    print(f"✅ API Key: {api_key[:10]}...")
    print(f"✅ Client ID: {client_id}")
    print(f"✅ Password: Set")
    print(f"✅ TOTP Secret: {'Set' if totp_secret else 'Not set'}")
    
    # Try to test authentication (simplified)
    print("\n🔍 Testing authentication...")
    try:
        import asyncio
        from app.core.instrument_manager import InstrumentManager
        from app.database import DatabaseManager
        
        async def test_auth():
            db_manager = DatabaseManager()
            im = InstrumentManager(db_manager)
            im.api_key = api_key
            im.client_id = client_id
            im.password = password
            im.totp_secret = totp_secret
            
            if im._are_credentials_configured():
                print("✅ Credentials format valid")
                return True
            else:
                print("❌ Credentials format invalid")
                return False
        
        success = asyncio.run(test_auth())
        return success
        
    except Exception as e:
        print(f"❌ Test failed: {e}")
        return False

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        test_credentials()
    else:
        setup_angelone_credentials() 